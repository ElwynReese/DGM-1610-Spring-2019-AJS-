Intro to Scripting DGM1610

Feb 11th, 2019 - Ints, strings, and Data Types

-Every time we make a new script/class, we make a new data type.
-Hardcoded scripts are uneditable by the engine.
-Reviewed script component adding. This makes the class object instanced.
-float is short for floating point value. Good for things like a variable velocity. Floats are really hard to calculate/
-Red squiggly line = error when coding.
-Doubles aren't used often in game design because the accuracy is typically not needed. Best practice is to not use them.
- public bool CanMove; (Bools are really cheap resourcewise.)
- public int FurCount = 10000;
- public float EatingSpeed = 0.4f;
- public bool CanEat = True;
-Floats only need to be declared in the script, not in the component menu.
- public UnityEvent Event; (JetBrains Rider will autocomplete prerequisite code.)
-
void Start()
{
Event.Invoke();
}

-The above script when connected together and modyfied in unity was used to invoke a 'setactive' function. This made the mammal cube disappear when the game started.
-A threaded pipe is a tight coupling.
-PVC pipe put together without thought or plan is like a loose coupling.
-

Feb 6th, 2019

-Review: Classes, Scripts including start and update.
-Right click in project view to create C# script.
-Project files must always be one word and be composed of CamelCasing
-Erroneous scripts will cause problems, purge everything you don't need.
-Creating a script called mammal.
-Keywords mean are reserved attrubutions. Public is an access modyfier that is accessible to 'everything?'
-Class is a classification of scripts that can then be used as objects.
-Class Names are identifiers, such as 'Animal' or 'Mammal'.
-The name of the script has to match the name of the class.
-MonoBehaviour is an increadibly poorly optimized class, it is going to be replaced by a new set in the near future.
-using UnityEngine; is an example of a namespace.
-Start and Update are identifiers.
-If you write good code, you shouldn't have to comment things... (Organization of largely complex projects may require it though.)
-Remove the comments from you code as you finalize scripts.
-Code block is like a paragraph.
-//This is a comment, the computer won't read this.
-The best code is written so that other people can understand it.
-If what your doing is a function call, you must use void.
-If there is a return call, you use something else.
-Inheritance allows you to trim the fat out of long-lame-scripts.
-A function call is a function that already exists that is being used through engine to perform the action.
-Components are instances of scripts, not the scripts themselves. They are like manufatured products made by a factory.
-Cookie cutters don't make cookie cutters, they make cookies. This is the basis of instancing in Unity.
-The relevance of script-component instancing is how it is used in Memory.
-GetComponent is a unity class. SpriteRenderer is a function, functions always have paranthesis. color modyfies SpriteRenderer. Alpha is set to transparent by default. = SkinColor; calls the variable.
void Start()
{
GetComponent<SpriteRenderer>().color = SkinColor;
}

-transform is a function. Rotate is a function.
void Update()
{
transform.rotate(0, 100, 0);
}

-Mammal script added, prints Hello, World!


Feb 4th, 2019
-A class is an object.
-Public is an access modifier. It is an aspect of unityEngine that inherits from unityEngine.
-Class stands for Classification like in Mercades E-Class
-The colon : signifies that the class belongs to with something else.
public class Animal : MonoBehaviour 
the above line of code causes 'Animal' to inherit from 'MonoBehaviour'
-void means that there is nothing there. It is also a function type.
-Remote example, class of remote that has functions as buttons.
-Start starts when the game starts.
-Update updates once every time a frame is pushed.
-Curly brackets are containers for classes and functions.
-Every function requires open and closed parenthesis, they are called function declarations.
-The unity engine was built so that you don't have to make one from scratch. You are not a coder in this respect, you are a scripter.

-We went over classes and inheritance. This is the fundimental concept of working in an engine like unity. Without inheritance, the unity engine would be irrelavant.
-